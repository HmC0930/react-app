{"version":3,"sources":["mycheckboxlist/index.tsx","myselect/index.tsx","myswitch/index.tsx","myinput/index.tsx","myslider/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CheckboxList","props","state","checked","setItem","num","res","value","i","console","log","getChecked","className","type","id","onClick","htmlFor","React","Component","MSelect","options","selected","choose","myselect","document","getElementById","index","ariaSelected","setState","selectd","getSelected","getValue","event","target","this","name","onChange","e","map","ele","MySwitch","isOn","style","backgroundColor","checkedColor","undefined","MyInput","inputValue","isEmpty","inputChange","getInput","clearInput","focus","MySlider","progress","slide","ev","scroll","bar","mask","barleft","onmousemove","window","leftVal","clientX","offsetLeft","that","offsetWidth","width","left","prog","onMouseDown","App","useState","setChecked","setSelected","setSlideValue","inputText","setInputText","setIsOn","showResult","setShowResult","float","str","getProgress","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.50049d93.chunk.js","sourcesContent":["import { throws } from 'assert';\r\nimport React from 'react';\r\n\r\ninterface IPropsCheck {\r\n    getChecked: (checked: string) => void;\r\n}\r\n\r\nclass CheckboxList extends React.Component<IPropsCheck> {\r\n    constructor(props: IPropsCheck) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        checked: [false, false, false]\r\n    }\r\n\r\n    \r\n    setItem = (num: number) => {\r\n        this.state.checked[num] = !(this.state.checked[num])\r\n        let res = \"\"\r\n        let value = [\"语文\", \"数学\", \"英语\"]\r\n        for (let i = 0; i < 3; i++) {\r\n            if(this.state.checked[i]) { \r\n                res += value[i]\r\n            }\r\n        }\r\n        console.log(res)\r\n        this.props.getChecked(res)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"checkboxList\">\r\n            <h2>checkbox多选:</h2>\r\n            <p>\r\n            <input type=\"checkbox\" id=\"cbox1\" value=\"first_checkbox\" onClick={()=>this.setItem(0)}></input>\r\n            <label htmlFor=\"cbox1\">语文</label>\r\n            </p>\r\n            <p>\r\n            <input type=\"checkbox\" id=\"cbox2\" value=\"second_checkbox\" onClick={()=>this.setItem(1)}></input>\r\n            <label htmlFor=\"cbox2\">数学</label>\r\n            </p>\r\n            <p>\r\n            <input type=\"checkbox\" id=\"cbox3\" value=\"third_checkbox\" onClick={()=>this.setItem(2)}></input>\r\n            <label htmlFor=\"cbox2\">英语</label>\r\n            </p>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n\r\nexport default CheckboxList;","import React from \"react\";\r\n\r\ninterface IPropsSelect {\r\n    getSelected: (str: string) => void;\r\n}\r\n\r\nclass MSelect extends React.Component<IPropsSelect> {\r\n    state = {\r\n        options: [\"apple\", \"orange\", \"banana\"],\r\n        selected: \"\"\r\n    }\r\n\r\n    choose = () => {\r\n        let myselect = document.getElementById(\"sl\");\r\n        let index = myselect?.ariaSelected\r\n        this.setState({selectd: index});\r\n        console.log(this.state.selected);\r\n        this.props.getSelected(this.state.selected)\r\n    }\r\n\r\n    handleLimit(event: React.ChangeEvent<HTMLSelectElement>) {\r\n        this.setState({\r\n            selected: event.target.value\r\n        })\r\n        console.log(this.state.selected)\r\n        this.props.getSelected(this.state.selected)\r\n    }\r\n\r\n    getValue = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        console.log(event.target.value)\r\n        this.setState({\r\n            options: [\"apple\", \"orange\", \"banana\"],\r\n            selected: event.target.value\r\n        })\r\n        this.props.getSelected(event.target.value)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h2>select选择框:</h2>\r\n                <select name=\"fruit\" id=\"sl\" onChange={(e) => this.getValue(e)}>\r\n                    {\r\n                        this.state.options.map((ele, index)=> {\r\n                            return(\r\n                                <option key={index}>{ele}</option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n\r\nexport default MSelect;","import { throwStatement } from '@babel/types';\r\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\r\nimport './myswitch.scss';\r\ninterface IPropsSwitch {\r\n    checked: boolean\r\n    onChange: (e: React.ChangeEvent) => void;\r\n    checkedColor?: string;\r\n}\r\n\r\nclass MySwitch extends React.Component<IPropsSwitch> {\r\n    constructor(props: IPropsSwitch) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        isOn: true\r\n    }\r\n\r\n\r\n    render() {\r\n    return (\r\n      <div>\r\n          <h2>switch开关：</h2>\r\n      <div className={'self-ui-switch'}>\r\n        <input\r\n          id = {'switch-input'}\r\n          checked={this.props.checked}\r\n          onChange={(e) => this.props.onChange(e)}\r\n          className={'self-ui-switch-input'}\r\n          type=\"checkbox\"\r\n        />\r\n        <label\r\n          htmlFor = \"switch-input\"\r\n          style={{ backgroundColor: this.props.checked ? this.props.checkedColor : undefined }}\r\n          className={'self-ui-switch-label'}\r\n        >\r\n          <span className={'self-ui-switch-button'}/>\r\n        </label>\r\n      </div>\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default MySwitch;","import React from 'react';\r\n\r\ninterface IPropsInput {\r\n    getInput: (str: string) => void;\r\n}\r\n\r\nclass MyInput extends React.Component<IPropsInput> {\r\n    constructor(props: IPropsInput) {\r\n        super(props);\r\n    }\r\n    state = {\r\n        inputValue : \"\",\r\n        isEmpty: true\r\n    }\r\n    inputChange= (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            inputValue: e.target.value,\r\n            isEmpty: (e.target.value === \"\")\r\n        });\r\n        this.props.getInput(e.target.value)\r\n        console.log(e.target.value)\r\n    }\r\n    clearInput=() => {\r\n        this.setState({\r\n            inputValue: \"\",\r\n            isEmpty: true\r\n        });\r\n        this.props.getInput(\"\")\r\n        document.getElementById(\"mInput\")?.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>input输入后可以清除:</h2>\r\n                <input id=\"mInput\" value={this.state.inputValue}  onChange={(e) => this.inputChange(e)}/>\r\n                {!(this.state.isEmpty)?\r\n                <button onClick={this.clearInput}>Clear</button>:<div/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n\r\nexport default MyInput;","import { getByPlaceholderText } from '@testing-library/react';\r\nimport React, {MouseEvent} from 'react';\r\n\r\ninterface IPropsSlide {\r\n    getProgress: (progress: number) => void;\r\n}\r\n\r\nclass MySlider extends React.Component<IPropsSlide> {\r\n    constructor(props: IPropsSlide) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        progress: 0\r\n    }\r\n    \r\n   \r\n\r\n    slide = (ev: MouseEvent<HTMLDivElement>) => {\r\n        let scroll = document.getElementById('scroll')!;\r\n        let bar = document.getElementById('bar')!;\r\n        let mask = document.getElementById('mask')!;\r\n        let barleft = 0;\r\n       \r\n        bar.onmousemove = (ev) => {\r\n            let event = ev || window.event;\r\n            let leftVal = event.clientX - bar.offsetLeft!\r\n            let that = bar;\r\n            let eventInner = event || window.event;\r\n            barleft = event.clientX - leftVal;\r\n            if (barleft < 0) {\r\n                barleft = 0;\r\n            } else if (barleft > scroll.offsetWidth) {\r\n                barleft = scroll.offsetWidth\r\n            }\r\n            mask.style.width = barleft + 'px';\r\n            that.style.left = barleft + 'px';\r\n\r\n            \r\n\r\n            let prog = barleft/(scroll.offsetWidth-bar.offsetWidth)*100 \r\n            console.log(prog);\r\n            this.setState ({\r\n                progress: prog\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>slide进度条（可拖动）：</h2>\r\n                <div className=\"scroll\" id=\"scroll\">\r\n                    <div className=\"bar\" id=\"bar\" onMouseDown={(e)=>this.slide(e)}>\r\n                    <div className=\"mask\" id=\"mask\"></div>\r\n                </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MySlider;","import React, { useCallback, useState } from 'react';\nimport CheckboxList from './mycheckboxlist';\nimport MySelect from './myselect';\nimport MySwitch from './myswitch';\nimport MyInput from './myinput';\nimport MySlider from './myslider';\nimport './App.css';\n\nfunction App() {\n  const [ checked, setChecked ] = useState(\"\");\n  const [ selected, setSelected ] = useState(\"\");\n  const [ slideValue, setSlideValue ] = useState(0);\n  const [ inputText, setInputText ] = useState(\"\");\n  const [ isOn, setIsOn ] = useState(false);\n  const [ showResult, setShowResult] = useState('none');\n\n  function handleClick() {\n    setShowResult('block')\n  }\n\n  let check = (checked: string) => {\n    setChecked(checked)\n  }\n\n  let input = (str: string) => {\n    setInputText(str)\n  }\n  \n  let select = (str: string) => {\n    setSelected(str)\n  }\n  \n  let slide = (num: number) => {\n    setSlideValue(num)\n  }\n\n  return (\n    <div>\n      <div style={{width:'50%', float:'left'}}>\n        <CheckboxList getChecked={check}/>\n        <MySelect getSelected={select}/>\n        <MySlider getProgress={slide}/>\n        <MyInput getInput={input}/>\n        <MySwitch checked={isOn} onChange={() => setIsOn(!isOn)}/>\n        <button onClick={handleClick}>提交</button>\n      </div>\n      \n      <div className={showResult? 'hidden' : ''} style={{width:'50%', float:'right', display: showResult}} >\n      <h2>checkbox多选：</h2>\n            <p>{checked}</p>\n            <h2>select多选框：</h2>\n            <p>{selected}</p>\n            <h2>slide进度条（可拖动）：</h2>\n            <p>{slide}</p>\n            <h2>input输入后可清除：</h2>\n            <p>{inputText}</p>\n            <h2>switch开关：</h2>\n            <p>{isOn? \"true\":\"false\"}</p>\n      </div>\n    </div>\n);\n}\n\nexport default App;\n\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}